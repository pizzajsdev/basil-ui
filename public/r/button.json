{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "button",
  "type": "registry:component",
  "title": "Button",
  "description": "A simple button component",
  "dependencies": [
    "clsx",
    "tailwind-merge",
    "class-variance-authority"
  ],
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/basil-ui/ui/button.tsx",
      "content": "import { cn } from '@/registry/basil-ui/lib/utils'\nimport { Slot } from '@/registry/basil-ui/ui/slot'\nimport { cva, type VariantProps } from 'class-variance-authority'\n\nexport const buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default: 'bg-primary text-primary-foreground shadow-xs hover:bg-primary/90',\n        destructive:\n          'bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60',\n        outline:\n          'border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50',\n        secondary: 'bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80',\n        ghost: 'hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50',\n        link: 'text-primary underline-offset-4 hover:underline',\n      },\n      size: {\n        default: 'h-9 px-4 py-2 has-[>svg]:px-3',\n        sm: 'h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5',\n        lg: 'h-10 rounded-md px-6 has-[>svg]:px-4',\n        icon: 'size-9',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  },\n)\n\nexport type ButtonProps = React.ComponentProps<'button'> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }\n\nexport function Button({ className, variant, size, asChild = false, ...props }: ButtonProps) {\n  const Comp = asChild ? Slot : 'button'\n\n  return <Comp className={cn(buttonVariants({ variant, size, className }))} {...props} />\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/basil-ui/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "registry/basil-ui/ui/slot.tsx",
      "content": "import { cn } from '@/registry/basil-ui/lib/utils'\nimport { cloneElement, isValidElement } from 'react'\n\ntype SlotProps = {\n  children?: React.ReactNode\n} & Record<string, any>\n\nexport function Slot({ children, className, ...restProps }: SlotProps): React.ReactElement {\n  if (!isValidElement(children)) {\n    throw new Error('<Slot> must have a single valid React element as a child.')\n  }\n\n  const childrenProps = { ...(children.props as Record<string, unknown>) }\n  const combinedClassNames = cn(className, childrenProps['className'] || '').trim()\n  if (combinedClassNames) {\n    childrenProps['className'] = combinedClassNames\n  }\n\n  return cloneElement(children, {\n    ...restProps,\n    ...childrenProps,\n  })\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}